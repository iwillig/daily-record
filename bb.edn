{:deps {medley/medley
        {:mvn/version "1.3.0"}
        io.github.paintparty/bling
        {:mvn/version "0.6.0"}}

 :paths ["src" "test"]

 :tasks
 {:requires ([babashka.fs :as fs]
             [bling.core :as bling]
             [babashka.process :as p])

  clean
  {:doc "Cleans the temp build files"
   :task (do
           (bling/callout
            {:type :info}
            (bling/bling [:bold "Running clean task"]))

           (fs/delete-tree "target")
           (fs/delete-if-exists "test-db.db")
           (fs/delete-if-exists "daily-worker.db")
           (fs/delete-if-exists "junit.xml")
           (fs/delete-if-exists "docs.html"))}

  test
  {:doc "Runs the projects with kocha"
   :task (do
           (bling/callout {:type :info}
                          (bling/bling [:bold "Running test task"]))

           (time
            (clojure "-M:jvm-base:dev:test")))}

  lint
  {:doc "Lints the code base with clj-kondo"
   :task (do
           (bling/callout
            {:type :info}
            (bling/bling [:bold "Running lint task"]))
           (time
            (clojure "-M:lint -m clj-kondo.main --lint dev src test")))}

  main {:doc "Run the main command line inteface"
        :task (do
                (apply clojure (into ["-M:main"] *command-line-args*)))}

  compile {:doc "Compile Main Clojure namespace"
           :task (clojure "-M -e \"(compile 'daily-record.main)\"")}

  build-uberjar {:doc "Build UberJar Jar"
                 :task (clojure "-M:jvm-base:uberdeps --main-class daily-record.main")}

  build-gvm {:doc "Build GraalVM native image"
             :task (apply shell
                          ["native-image"
                           "--no-fallback"
                           "--initialize-at-build-time"
                           "--initialize-at-run-time=sun.awt.X11.XWM"
                           "--initialize-at-run-time=sun.awt.X11.XWindow"
                           "--initialize-at-run-time=sun.awt.X11.XSystemTrayPeer"
                           "-jar" "target/daily-record.jar"])}

  build-cli {:doc "Rebuild Command Line Tool"
             :task (do (run 'clean)
                       (run 'compile)
                       (run 'build-uberjar)
                       (run 'build-gvm))}

  outdated
  {:doc "Run command to detect outdate version of our deps"
   :task (clojure "-M:dev:outdated -m depot.outdated.main")}

  nrepl
  {:doc "Run a nRepl"
   :task
   (do
     (bling/callout
      {:type :info}
      (bling/bling [:bold "Running nRepl"]))
     (clojure "-M:jvm-base:dev:test:nrepl"))}

  fmt
  {:doc "Fix format clojure code"
   :task
   (do
     (clojure "-M:dev:format -m cljstyle.main fix scripts src dev"))}

  fmt-check
  {:doc "Check format clojure code"
   :task
   (do
     (clojure "-M:dev:format -m cljstyle.main check scripts src dev"))}

  ci
  {:doc "Runs linting and tests for the CI"
   :task (do (run 'clean)
             #_(run 'fmt-check)
             #_(run 'lint)
             (run 'test))}

  build-closure
  {:doc "Build SQLite closure extension for current platform"
   :task (let [platform (case (System/getProperty "os.name")
                          "Mac OS X" :macos
                          "Linux" :linux
                          :unsupported)
               ext-dir "sqlite-exts"
               build-dir "target/sqlite-exts"
               source-file (str ext-dir "/closure.c")]

           (when (= platform :unsupported)
             (throw (ex-info "Unsupported platform" {:os (System/getProperty "os.name")})))

           (fs/create-dirs build-dir)

           (let [output-file (case platform
                               :macos (str build-dir "/closure.dylib")
                               :linux (str build-dir "/closure.so"))
                 flags (case platform
                         :macos ["-dynamiclib"]
                         :linux ["-shared"])]

             (bling/callout {:type :info}
                            (bling/bling [:bold (str "Building closure extension for " (name platform))]))

             (apply shell "gcc" "-g" "-O2" "-fPIC" "-Wall"
                    (concat flags [source-file "-lsqlite3" "-o" output-file]))

             (bling/callout {:type :success}
                            (bling/bling [:bold (str "Extension built: " output-file)]))))}

  migrate
  {:doc "Run database migrations"
   :task (do
           (bling/callout {:type :info}
                          (bling/bling [:bold "Running database migrations"]))
           (clojure "-M:dev -e \"(require '[daily-worker.migrations :as migrations]) (migrations/migrate!)\""))}

  migrate-rollback
  {:doc "Rollback last database migration"
   :task (do
           (bling/callout {:type :info}
                          (bling/bling [:bold "Rolling back last migration"]))
           (clojure "-M:dev -e \"(require '[daily-worker.migrations :as migrations]) (migrations/rollback!)\""))}

  migrate-status
  {:doc "Show database migration status"
   :task (do
           (bling/callout {:type :info}
                          (bling/bling [:bold "Checking migration status"]))
           (clojure "-M:dev -e \"(require '[daily-worker.migrations :as migrations]) (migrations/status)\""))}

  migrate-reset
  {:doc "Reset database (rollback all migrations)"
   :task (do
           (bling/callout {:type :warn}
                          (bling/bling [:bold "Resetting database - this will remove all data!"]))
           (clojure "-M:dev -e \"(require '[daily-worker.migrations :as migrations]) (migrations/reset-db!)\""))}}}
